import os
import sys
import subprocess
import re
import time
import json
import requests
from bs4 import BeautifulSoup
from urllib.parse import quote
from colorama import Fore, Style, init
from tqdm import tqdm
import phonenumbers
from phonenumbers import geocoder, carrier, number_type
import signal

# Kütüphane yüklemesi (Varsa kurar)
def install_libraries(packages):
    for package in packages:
        try:
            __import__(package)
            print(f"{Fore.GREEN}'{package}' zaten var, devam...{Style.RESET_ALL}")
        except ImportError:
            print(f"{Fore.YELLOW}'{package}' eksik, kuruyorum...{Style.RESET_ALL}")
            try:
                subprocess.check_call([sys.executable, "-m", "pip", "install", package])
                print(f"{Fore.GREEN}'{package}' başarıyla kuruldu!{Style.RESET_ALL}")
            except:
                print(f"{Fore.RED}'{package}' kurulamadı, neti kontrol et!{Style.RESET_ALL}")
                sys.exit(1)

required_libraries = ["phonenumbers", "colorama", "tqdm", "requests", "beautifulsoup4"]
install_libraries(required_libraries)

init(autoreset=True)

LANGUAGES = {
    "tr": {
        "welcome": "Selam! SoytariNumber ile numaraların sırlarını çözeceğiz, hazır mısın? 🚀",
        "menu": "=== SoytariNumber Menü ===\n1) Numara sorgula\n2) Toplu analiz\n3) Raporları göster\n4) Ayarlar\n5) Çıkış\n6) SMS Bombardımanı\nSeçimini yap: ",
        "invalid_choice": "Geçersiz seçim, 1-6 arası sayı gir! 😅",
        "enter_number": "Numarayı uluslararası formatta gir (+905301234567): ",
        "invalid_number": "Bi sıkıntı var numarada, düzgün format gir! 🚫",
        "analyzing": "Numara analiz ediliyor...",
        "report_saved": "Rapor kaydedildi: {}",
        "no_reports": "Hiç rapor yok be kardeşim! 😕",
        "goodbye": "Görüşürüz, numaraların peşinde kal! 👋",
        "settings": "=== Ayarlar ===\n1) Dil seç (TR/EN/ES)\n2) Tema seç (Dark/Neon/Pastel)\n3) Geri\nSeçim: ",
        "language_selected": "Dil seçildi: {}",
        "theme_selected": "Tema seçildi: {}",
        "unknown_operator": "Bilinmeyen operatör",
        "unknown_area": "Bilinmeyen bölge",
        "file_not_found": "Dosya bulunamadı!",
        "whatsapp_high": "WhatsApp kullanma olasılığı yüksek! 📱",
        "whatsapp_likely": "WhatsApp kullanıyor olabilir! 🌍",
        "whatsapp_unlikely": "VoIP numarası, WhatsApp kullanmaz gibi. 🤔",
        "whatsapp_uncertain": "WhatsApp kullanıyor olabilir ama emin değiliz.",
        "social_media_likely": "Telegram, Signal veya WhatsApp kullanıyor olabilir!",
        "social_media_voip": "VoIP numarası, Skype ya da Discord olabilir.",
        "social_media_uncertain": "Sosyal medya durumu belirsiz.",
        "sms_bombardiman_start": "SMS Bombardımına başlıyoruz! 🚨 Numara: {}",
        "sms_bombardiman_error": "SMS Bombardımında hata: {}",
        "sms_bombardiman_success": "SMS Bombardımanı başlatıldı, mesajlar gönderiliyor! 💥",
        "sms_bombardiman_stop": "SMS Bombardımanı durduruldu! 🛑",
        "sms_bombardiman_prompt": "Durdurmak için 'durdur' yaz veya Enter'a basarak devam et: ",
    },
    "en": {
        "welcome": "Yo! Ready to crack number secrets with SoytariNumber? 🚀",
        "menu": "=== SoytariNumber Menu ===\n1) Analyze number\n2) Bulk analysis\n3) View reports\n4) Settings\n5) Exit\n6) SMS Bombardment\nChoice: ",
        "invalid_choice": "Invalid choice, enter a number between 1-6! 😅",
        "enter_number": "Enter the number in international format (+905301234567): ",
        "invalid_number": "Something's wrong, enter a proper format! 🚫",
        "analyzing": "Analyzing number...",
        "report_saved": "Report saved: {}",
        "no_reports": "No reports found!",
        "goodbye": "Bye, keep chasing those number secrets! 👋",
        "settings": "=== Settings ===\n1) Select language (TR/EN/ES)\n2) Select theme (Dark/Neon/Pastel)\n3) Back\nChoice: ",
        "language_selected": "Language selected: {}",
        "theme_selected": "Theme selected: {}",
        "unknown_operator": "Unknown operator",
        "unknown_area": "Unknown area",
        "file_not_found": "File not found!",
        "whatsapp_high": "High chance of WhatsApp usage! 📱",
        "whatsapp_likely": "Likely using WhatsApp! 🌍",
        "whatsapp_unlikely": "VoIP number, unlikely WhatsApp user. 🤔",
        "whatsapp_uncertain": "Might use WhatsApp but uncertain.",
        "social_media_likely": "Likely on Telegram, Signal or WhatsApp!",
        "social_media_voip": "VoIP number, maybe Skype or Discord.",
        "social_media_uncertain": "Social media usage unclear.",
        "sms_bombardiman_start": "Starting SMS Bombardment! 🚨 Number: {}",
        "sms_bombardiman_error": "SMS Bombardment error: {}",
        "sms_bombardiman_success": "SMS Bombardment started, messages being sent! 💥",
        "sms_bombardiman_stop": "SMS Bombardment stopped! 🛑",
        "sms_bombardiman_prompt": "Type 'stop' to halt or press Enter to continue: ",
    },
    "es": {
        "welcome": "¡Ey! ¿Listo para descubrir los secretos con SoytariNumber? 🚀",
        "menu": "=== Menú SoytariNumber ===\n1) Analizar número\n2) Análisis masivo\n3) Ver informes\n4) Configuraciones\n5) Salir\n6) Bombardeo de SMS\nElección: ",
        "invalid_choice": "Elección inválida, mete un número entre 1-6! 😅",
        "enter_number": "Ingresa el número en formato internacional (+905301234567): ",
        "invalid_number": "Formato incorrecto! 🚫",
        "analyzing": "Analizando número...",
        "report_saved": "Informe guardado: {}",
        "no_reports": "No hay informes! 😕",
        "goodbye": "Nos vemos, sigue con esos secretos! 👋",
        "settings": "=== Configuraciones ===\n1) Seleccionar idioma (TR/EN/ES)\n2) Seleccionar tema (Oscuro/Neón/Pastel)\n3) Volver\nElección: ",
        "language_selected": "Idioma seleccionado: {}",
        "theme_selected": "Tema seleccionado: {}",
        "unknown_operator": "Operador desconocido",
        "unknown_area": "Área desconocida",
        "file_not_found": "Archivo no encontrado!",
        "whatsapp_high": "Alta probabilidad de WhatsApp! 📱",
        "whatsapp_likely": "Probablemente usa WhatsApp! 🌍",
        "whatsapp_unlikely": "Número VoIP, improbable WhatsApp. 🤔",
        "whatsapp_uncertain": "Puede usar WhatsApp pero no seguro.",
        "social_media_likely": "Probablemente usa Telegram, Signal o WhatsApp!",
        "social_media_voip": "Número VoIP, puede ser Skype o Discord.",
        "social_media_uncertain": "Uso de redes sociales incierto.",
        "sms_bombardiman_start": "¡Iniciando bombardeo de SMS! 🚨 Número: {}",
        "sms_bombardiman_error": "Error en bombardeo de SMS: {}",
        "sms_bombardiman_success": "¡Bombardeo de SMS iniciado, los mensajes se están enviando! 💥",
        "sms_bombardiman_stop": "¡Bombardeo de SMS detenido! 🛑",
        "sms_bombardiman_prompt": "Escribe 'detener' para parar o presiona Enter para continuar: ",
    }
}

THEMES = {
    "dark": {"primary": Fore.BLUE, "highlight": Fore.CYAN, "error": Fore.RED, "success": Fore.GREEN},
    "neon": {"primary": Fore.MAGENTA, "highlight": Fore.YELLOW, "error": Fore.RED, "success": Fore.GREEN},
    "pastel": {"primary": Fore.LIGHTBLUE_EX, "highlight": Fore.LIGHTYELLOW_EX, "error": Fore.LIGHTRED_EX, "success": Fore.LIGHTGREEN_EX}
}

settings = {"language": "tr", "theme": "dark"}

OPERATORS = {
    "9053": "Turkcell",
    "9054": "Vodafone",
    "9055": "Türk Telekom",
    "9050": "Vodafone",
    "9059": "Türk Telekom",
    "9056": "Turkcell",
    "9057": "Vodafone",
}

AREA_CODES_TR = {
    "212": "İstanbul (Avrupa Yakası)",
    "216": "İstanbul (Anadolu Yakası)",
    "232": "İzmir",
    "312": "Ankara",
    "352": "Konya",
    "242": "Antalya",
    "262": "Kocaeli",
    "332": "Konya",
}

NUM_TYPE_MAP = {
    0: {"tr": "Bilinmeyen numara, tam bir muamma!", "en": "Unknown number, a total mystery!", "es": "¡Número desconocido, un misterio total!"},
    1: {"tr": "Mobil numara, cebinde!", "en": "Mobile number, always in your pocket!", "es": "¡Número móvil, siempre en tu bolsillo!"},
    2: {"tr": "Sabit hat, nostalji sevenler için!", "en": "Landline, for nostalgia lovers!", "es": "¡Línea fija, para amantes de la nostalgia!"},
    7: {"tr": "VoIP numarası, teknoloji meraklısı!", "en": "VoIP number, tech enthusiast!", "es": "¡Número VoIP, entusiasta de la tecnología!"},
}

SPAM_PREFIXES = ["+4470", "+1202", "+1900"]

def clear_screen():
    os.system('cls' if os.name == 'nt' else 'clear')

def slow_print(text, delay=0.02, color=Fore.WHITE):
    for c in text:
        print(f"{color}{c}{Style.RESET_ALL}", end='', flush=True)
        time.sleep(delay)
    print()

def show_welcome():
    clear_screen()
    ascii_art = """
╔════════════════════════════════════════════╗
║                                            ║
║   SoytariNumber - Numara Dedektifi 🕵️‍♂️   ║
║   Telefon Numaralarının Sırlarını Çöz!     ║
║                                            ║
╚════════════════════════════════════════════╝
"""
    theme = THEMES[settings["theme"]]
    for line in ascii_art.splitlines():
        print(f"{theme['primary']}{line}{Style.RESET_ALL}")
        time.sleep(0.15)
    slow_print(LANGUAGES[settings["language"]]["welcome"], 0.03, theme["highlight"])
    time.sleep(1)

def get_flag(country_code):
    OFFSET = 127397
    try:
        return ''.join(chr(ord(c) + OFFSET) for c in country_code.upper())
    except:
        return ""

def guess_operator(number):
    for prefix, op in OPERATORS.items():
        if number.startswith(prefix):
            return op
    return LANGUAGES[settings["language"]]["unknown_operator"]

def guess_area(code):
    return AREA_CODES_TR.get(code, LANGUAGES[settings["language"]]["unknown_area"])

def format_number(number):
    number = re.sub(r'[\s\-\(\)]', '', number)
    if not number.startswith('+'):
        number = '+' + number
    return number if validate_number(number) else None

def validate_number(num):
    pattern = re.compile(r'^\+\d{7,15}$')
    return bool(pattern.match(num))

def guess_whatsapp(number, country_code, num_type):
    lang = settings["language"]
    lang_dict = LANGUAGES[lang]
    if num_type == 1:
        if country_code == "TR":
            return lang_dict["whatsapp_high"]
        return lang_dict["whatsapp_likely"]
    elif num_type == 7:
        return lang_dict["whatsapp_unlikely"]
    return lang_dict["whatsapp_uncertain"]

def guess_social_media(num_type):
    lang = settings["language"]
    lang_dict = LANGUAGES[lang]
    if num_type == 1:
        return lang_dict["social_media_likely"]
    elif num_type == 7:
        return lang_dict["social_media_voip"]
    return lang_dict["social_media_uncertain"]

def calculate_spam_score(number, online_results):
    score = 100
    if any(number.startswith(prefix) for prefix in SPAM_PREFIXES):
        score -= 50
    if any(word in online_results.lower() for word in ["şikayet", "spam", "dolandırıcılık"]):
        score -= 30
    return max(0, score)

def search_number_online(number):
    try:
        headers = {"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) Chrome/91.0.4472.124"}
        search_query = quote(number)
        url = f"https://www.google.com/search?q={search_query}"
        response = requests.get(url, headers=headers, timeout=5)
        soup = BeautifulSoup(response.text, "html.parser")
        results = []
        for g in soup.find_all('div', class_='g'):
            title = g.find('h3')
            snippet = g.find('div', class_='VwiC3b')
            if title and snippet:
                results.append(f"Başlık: {title.text}\nAçıklama: {snippet.text[:100]}...")
        return "\n".join(results[:3]) or "No results found."
    except Exception as e:
        return f"Search error: {str(e)}"

def phoneinfoga_style_search(number):
    results = []
    headers = {"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) Chrome/91.0.4472.124"}
    search_query = number.replace('+', '')
    alt_query = number[1:]

    # 1. WhoCalledMe taraması
    try:
        url = f"https://who-called.me.uk/phone-number/{search_query}"
        response = requests.get(url, headers=headers, timeout=5)
        soup = BeautifulSoup(response.text, "html.parser")
        comments = soup.find_all('div', class_='comment-item')
        if comments:
            results.append(f"WhoCalledMe: {' | '.join([c.text.strip()[:100] + '...' for c in comments[:2]])}")
        else:
            results.append("WhoCalledMe: Yorum bulunamadı.")
    except Exception as e:
        results.append(f"WhoCalledMe: Hata - {str(e)}")

    # 2. Sync.me taraması
    try:
        url = f"https://sync.me/en/search/{search_query}"
        response = requests.get(url, headers=headers, timeout=5)
        soup = BeautifulSoup(response.text, "html.parser")
        name = soup.find('h1', class_='caller-name')
        spam_info = soup.find('div', class_='spam-info')
        if name or spam_info:
            name_text = name.text.strip() if name else "İsim bulunamadı"
            spam_text = spam_info.text.strip()[:100] + "..." if spam_info else "Spam bilgisi yok"
            results.append(f"SyncMe: İsim: {name_text} | {spam_text}")
        else:
            results.append("SyncMe: Bilgi bulunamadı.")
    except Exception as e:
        results.append(f"SyncMe: Hata - {str(e)}")

    # 3. SikayetVar taraması
    try:
        url = f"https://www.sikayetvar.com/arama?q={quote(number)}"
        response = requests.get(url, headers=headers, timeout=5)
        soup = BeautifulSoup(response.text, "html.parser")
        complaints = soup.find_all('div', class_='card complaint-card')
        if complaints:
            results.append(f"SikayetVar: {' | '.join([c.find('h2').text.strip()[:100] + '...' for c in complaints[:2]])}")
        else:
            results.append("SikayetVar: Şikayet bulunamadı.")
    except Exception as e:
        results.append(f"SikayetVar: Hata - {str(e)}")

    # 4. ShouldIAnswer taraması
    try:
        url = f"https://www.shouldianswer.com/phone-number/{search_query}"
        response = requests.get(url, headers=headers, timeout=5)
        soup = BeautifulSoup(response.text, "html.parser")
        rating = soup.find('div', class_='rating')
        comments = soup.find_all('div', class_='comment')
        if rating or comments:
            rating_text = rating.text.strip() if rating else "Değerlendirme yok"
            comment_text = ' | '.join([c.text.strip()[:100] + '...' for c in comments[:2]]) if comments else "Yorum yok"
            results.append(f"ShouldIAnswer: Değerlendirme: {rating_text} | {comment_text}")
        else:
            results.append("ShouldIAnswer: Bilgi bulunamadı.")
    except Exception as e:
        results.append(f"ShouldIAnswer: Hata - {str(e)}")

    # 5. Tellows taraması
    try:
        url = f"https://www.tellows.com/num/{search_query}"
        response = requests.get(url, headers=headers, timeout=5)
        soup = BeautifulSoup(response.text, "html.parser")
        score = soup.find('span', class_='tellows-score')
        comments = soup.find_all('div', class_='comment')
        if score or comments:
            score_text = score.text.strip() if score else "Puan bulunamadı"
            comment_text = ' | '.join([c.text.strip()[:100] + '...' for c in comments[:2]]) if comments else "Yorum yok"
            results.append(f"Tellows: Puan: {score_text} | {comment_text}")
        else:
            results.append("Tellows: Bilgi bulunamadı.")
    except Exception as e:
        results.append(f"Tellows: Hata - {str(e)}")

    return "\n".join(results) or "PhoneInfoga tarzı sonuç: Hiçbir kaynakta bilgi bulunamadı."

def sms_bombardiman(number):
    lang = settings["language"]
    theme = THEMES[settings["theme"]]
    slow_print(LANGUAGES[lang]["sms_bombardiman_start"].format(number), color=theme["highlight"])
    
    try:
        # Enough-Reborn reposunu klonla
        repo_dir = "sms_tool"
        if not os.path.exists(repo_dir):
            slow_print("SMS aracı indiriliyor...", color=theme["primary"])
            result = subprocess.run(["git", "clone", "https://github.com/tingirifistik/Enough-Reborn.git", repo_dir], capture_output=True, text=True)
            if result.returncode != 0:
                raise Exception(f"Git clone hatası: {result.stderr}")
        
        # Repo içeriğini kontrol et
        enough_path = None
        for root, _, files in os.walk(repo_dir):
            if "enough.py" in files:
                enough_path = os.path.join(root, "enough.py")
                break
        if not enough_path:
            raise FileNotFoundError("enough.py dosyası repo içinde bulunamadı! Repo yapısını kontrol et.")
        
        # Bağımlılıkları yükle
        requirements_path = os.path.join(repo_dir, "requirements.txt")
        if os.path.exists(requirements_path):
            slow_print("Bağımlılıklar yükleniyor...", color=theme["primary"])
            result = subprocess.run([sys.executable, "-m", "pip", "install", "-r", requirements_path], capture_output=True, text=True)
            if result.returncode != 0:
                raise Exception(f"Bağımlılık yükleme hatası: {result.stderr}")
        else:
            slow_print("Uyarı: requirements.txt bulunamadı, devam ediliyor...", color=theme["error"])
        
        # Farklı numara formatlarını dene
        number_formats = [number, number[1:], "0" + number[1:]]
        process = None
        for fmt in number_formats:
            try:
                slow_print(f"Numara formatı deneniyor: {fmt}", color=theme["primary"])
                process = subprocess.Popen(["python3", enough_path, fmt], cwd=os.path.dirname(enough_path), stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                slow_print(LANGUAGES[lang]["sms_bombardiman_success"], color=theme["success"])
                break
            except Exception as e:
                continue
        
        if not process:
            raise Exception("Tüm numara formatları başarısız oldu!")
        
        # Sürecin çıktısını anlık olarak göster
        while process.poll() is None:
            line = process.stdout.readline()
            if line:
                slow_print(f"SMS Aracı Çıktısı: {line.strip()}", color=theme["primary"])
            try:
                user_input = input(LANGUAGES[lang]["sms_bombardiman_prompt"]).strip().lower()
                if user_input in ["durdur", "stop", "detener"]:
                    process.terminate()
                    try:
                        process.wait(timeout=5)
                    except subprocess.TimeoutExpired:
                        process.kill()
                    slow_print(LANGUAGES[lang]["sms_bombardiman_stop"], color=theme["error"])
                    break
            except KeyboardInterrupt:
                process.terminate()
                try:
                    process.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    process.kill()
                slow_print(LANGUAGES[lang]["sms_bombardiman_stop"], color=theme["error"])
                break

        # Hata mesajlarını kontrol et
        stdout, stderr = process.communicate()
        if stderr:
            slow_print(LANGUAGES[lang]["sms_bombardiman_error"].format(stderr), color=theme["error"])
        if stdout:
            slow_print(f"SMS Aracı Sonucu: {stdout}", color=theme["success"])

    except Exception as e:
        slow_print(LANGUAGES[lang]["sms_bombardiman_error"].format(str(e)), color=theme["error"])

def get_number_type_desc(num_type):
    return NUM_TYPE_MAP.get(num_type, {"tr": "Bilinmeyen numara!", "en": "Unknown number!", "es": "¡Número desconocido!"})[settings["language"]]

def save_to_db(number, details):
    db_file = "number_db.json"
    data = {}
    if os.path.exists(db_file):
        with open(db_file, "r", encoding="utf-8") as f:
            data = json.load(f)
    data[number] = details
    with open(db_file, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def get_from_db(number):
    db_file = "number_db.json"
    if os.path.exists(db_file):
        with open(db_file, "r", encoding="utf-8") as f:
            data = json.load(f)
        return data.get(number)
    return None

def save_report(number, details):
    timestamp = time.strftime("%Y%m%d_%H%M%S")
    filename = f"numara_raporu_{timestamp}.txt"
    with open(filename, "w", encoding="utf-8") as f:
        f.write("=== SoytariNumber Analiz Raporu ===\n")
        f.write(f"Tarih: {time.strftime('%Y-%m-%d %H:%M:%S')}\n\n")
        for key, value in details.items():
            f.write(f"{key}: {value}\n")
    return filename

def analyze_single_number(number):
    try:
        parsed = phonenumbers.parse(number)
    except phonenumbers.phonenumberutil.NumberParseException as e:
        return {"Hata": str(e)}

    country_code = phonenumbers.region_code_for_number(parsed)
    country_name = geocoder.description_for_number(parsed, settings["language"])
    operator = carrier.name_for_number(parsed, settings["language"])
    num_type_code = number_type(parsed)
    num_type_desc = get_number_type_desc(num_type_code)
    flag = get_flag(country_code) if country_code else ""
    whatsapp_guess = guess_whatsapp(number, country_code, num_type_code)
    social_media_guess = guess_social_media(num_type_code)
    online_results = search_number_online(number)
    spam_score = calculate_spam_score(number, online_results)
    area = guess_area(number[3:6]) if country_code == "TR" else "N/A"
    phoneinfoga_results = phoneinfoga_style_search(number)

    details = {
        "Numara": number,
        "Ülke": f"{country_name} {flag}",
        "Operatör (Kütüphane)": operator or LANGUAGES[settings["language"]]["unknown_operator"],
        "Operatör (Tahmin)": guess_operator(number[1:5]),
        "Numara Tipi": num_type_desc,
        "Bölge": area,
        "WhatsApp Olasılığı": whatsapp_guess,
        "Sosyal Medya Tahmini": social_media_guess,
        "İnternet Arama Sonuçları": online_results[:500] + ("..." if len(online_results)>500 else ""),
        "Spam Puanı (0-100)": spam_score,
        "PhoneInfoga Tarzı Sonuç": phoneinfoga_results
    }

    save_to_db(number, details)
    report_file = save_report(number, details)
    theme = THEMES[settings["theme"]]
    slow_print(f"{theme['success']}[✔] {LANGUAGES[settings['language']]['report_saved'].format(report_file)}", color=theme["success"])
    return details

def main():
    show_welcome()
    while True:
        choice = input(THEMES[settings["theme"]]["primary"] + LANGUAGES[settings["language"]]["menu"] + Style.RESET_ALL).strip()
        if choice == '1':
            num = input(LANGUAGES[settings["language"]]["enter_number"])
            num = format_number(num)
            if not num:
                print(Fore.RED + LANGUAGES[settings["language"]]["invalid_number"])
                continue
            print(LANGUAGES[settings["language"]]["analyzing"])
            details = analyze_single_number(num)
            for k, v in details.items():
                print(f"{k}: {v}")
            input("Devam etmek için Enter'a bas...")
        elif choice == '2':
            print("Toplu analiz modu şu an yok (geliyor)...")
            time.sleep(1)
        elif choice == '3':
            db_file = "number_db.json"
            if not os.path.exists(db_file):
                print(Fore.YELLOW + LANGUAGES[settings["language"]]["no_reports"])
                continue
            with open(db_file, "r", encoding="utf-8") as f:
                data = json.load(f)
            if not data:
                print(Fore.YELLOW + LANGUAGES[settings["language"]]["no_reports"])
                continue
            for num, det in data.items():
                print(f"\n--- {num} ---")
                for k, v in det.items():
                    print(f"{k}: {v}")
            input("Devam etmek için Enter'a bas...")
        elif choice == '4':
            while True:
                s_choice = input(LANGUAGES[settings["language"]]["settings"])
                if s_choice == '1':
                    lang = input("Dil seç (tr/en/es): ").lower()
                    if lang in LANGUAGES:
                        settings["language"] = lang
                        print(LANGUAGES[lang]["language_selected"].format(lang))
                    else:
                        print("Desteklenmeyen dil!")
                elif s_choice == '2':
                    theme = input("Tema seç (dark/neon/pastel): ").lower()
                    if theme in THEMES:
                        settings["theme"] = theme
                        print(LANGUAGES[settings["language"]]["theme_selected"].format(theme))
                    else:
                        print("Desteklenmeyen tema!")
                elif s_choice == '3':
                    break
                else:
                    print(LANGUAGES[settings["language"]]["invalid_choice"])
        elif choice == '5':
            print(LANGUAGES[settings["language"]]["goodbye"])
            break
        elif choice == '6':
            num = input(LANGUAGES[settings["language"]]["enter_number"])
            num = format_number(num)
            if not num:
                print(Fore.RED + LANGUAGES[settings["language"]]["invalid_number"])
                continue
            sms_bombardiman(num)
            input("Devam etmek için Enter'a bas...")
        else:
            print(Fore.RED + LANGUAGES[settings["language"]]["invalid_choice"])

if __name__ == "__main__":
    main()
