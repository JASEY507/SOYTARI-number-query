import os
import sys
import subprocess
import re
import time
import json
import requests
from bs4 import BeautifulSoup
from urllib.parse import quote
from colorama import Fore, Style, init
from tqdm import tqdm
import phonenumbers
from phonenumbers import geocoder, carrier, number_type

# Kütüphane yüklemesi (Varsa kurar)
def install_libraries(packages):
    for package in packages:
        try:
            __import__(package)
            print(f"{Fore.GREEN}'{package}' zaten var, devam...{Style.RESET_ALL}")
        except ImportError:
            print(f"{Fore.YELLOW}'{package}' eksik, kuruyorum...{Style.RESET_ALL}")
            try:
                subprocess.check_call([sys.executable, "-m", "pip", "install", package])
                print(f"{Fore.GREEN}'{package}' başarıyla kuruldu!{Style.RESET_ALL}")
            except:
                print(f"{Fore.RED}'{package}' kurulamadı, neti kontrol et!{Style.RESET_ALL}")
                sys.exit(1)

required_libraries = ["phonenumbers", "colorama", "tqdm", "requests", "beautifulsoup4"]
install_libraries(required_libraries)

init(autoreset=True)

# Dil ve Tema ayarları
LANGUAGES = {
    "tr": {
        "welcome": "Selam! SoytariNumber ile numaraların sırlarını çözeceğiz, hazır mısın? 🚀",
        "menu": "=== SoytariNumber Menü ===\n1) Numara sorgula\n2) Toplu analiz\n3) Raporları göster\n4) Ayarlar\n5) Çıkış\nSeçimini yap: ",
        "invalid_choice": "Geçersiz seçim, 1-5 arası sayı gir! 😅",
        "enter_number": "Numarayı uluslararası formatta gir (+905301234567): ",
        "invalid_number": "Bi sıkıntı var numarada, düzgün format gir! 🚫",
        "analyzing": "Numara analiz ediliyor...",
        "report_saved": "Rapor kaydedildi: {}",
        "no_reports": "Hiç rapor yok be kardeşim! 😕",
        "goodbye": "Görüşürüz, numaraların peşinde kal! 👋",
        "settings": "=== Ayarlar ===\n1) Dil seç (TR/EN/ES)\n2) Tema seç (Dark/Neon/Pastel)\n3) Geri\nSeçim: ",
        "language_selected": "Dil seçildi: {}",
        "theme_selected": "Tema seçildi: {}",
        "unknown_operator": "Bilinmeyen operatör",
        "unknown_area": "Bilinmeyen bölge",
        "file_not_found": "Dosya bulunamadı!",
        "whatsapp_high": "WhatsApp kullanma olasılığı yüksek! 📱",
        "whatsapp_likely": "WhatsApp kullanıyor olabilir! 🌍",
        "whatsapp_unlikely": "VoIP numarası, WhatsApp kullanmaz gibi. 🤔",
        "whatsapp_uncertain": "WhatsApp kullanıyor olabilir ama emin değiliz.",
        "social_media_likely": "Telegram, Signal veya WhatsApp kullanıyor olabilir!",
        "social_media_voip": "VoIP numarası, Skype ya da Discord olabilir.",
        "social_media_uncertain": "Sosyal medya durumu belirsiz.",
    },
    "en": {
        "welcome": "Yo! Ready to crack number secrets with SoytariNumber? 🚀",
        "menu": "=== SoytariNumber Menu ===\n1) Analyze number\n2) Bulk analysis\n3) View reports\n4) Settings\n5) Exit\nChoice: ",
        "invalid_choice": "Invalid choice, enter a number between 1-5! 😅",
        "enter_number": "Enter the number in international format (+905301234567): ",
        "invalid_number": "Something's wrong, enter a proper format! 🚫",
        "analyzing": "Analyzing number...",
        "report_saved": "Report saved: {}",
        "no_reports": "No reports found!",
        "goodbye": "Bye, keep chasing those number secrets! 👋",
        "settings": "=== Settings ===\n1) Select language (TR/EN/ES)\n2) Select theme (Dark/Neon/Pastel)\n3) Back\nChoice: ",
        "language_selected": "Language selected: {}",
        "theme_selected": "Theme selected: {}",
        "unknown_operator": "Unknown operator",
        "unknown_area": "Unknown area",
        "file_not_found": "File not found!",
        "whatsapp_high": "High chance of WhatsApp usage! 📱",
        "whatsapp_likely": "Likely using WhatsApp! 🌍",
        "whatsapp_unlikely": "VoIP number, unlikely WhatsApp user. 🤔",
        "whatsapp_uncertain": "Might use WhatsApp but uncertain.",
        "social_media_likely": "Likely on Telegram, Signal or WhatsApp!",
        "social_media_voip": "VoIP number, maybe Skype or Discord.",
        "social_media_uncertain": "Social media usage unclear.",
    },
    "es": {
        "welcome": "¡Ey! ¿Listo para descubrir los secretos con SoytariNumber? 🚀",
        "menu": "=== Menú SoytariNumber ===\n1) Analizar número\n2) Análisis masivo\n3) Ver informes\n4) Configuraciones\n5) Salir\nElección: ",
        "invalid_choice": "Elección inválida, mete un número entre 1-5! 😅",
        "enter_number": "Ingresa el número en formato internacional (+905301234567): ",
        "invalid_number": "Formato incorrecto! 🚫",
        "analyzing": "Analizando número...",
        "report_saved": "Informe guardado: {}",
        "no_reports": "No hay informes! 😕",
        "goodbye": "Nos vemos, sigue con esos secretos! 👋",
        "settings": "=== Configuraciones ===\n1) Seleccionar idioma (TR/EN/ES)\n2) Seleccionar tema (Oscuro/Neón/Pastel)\n3) Volver\nElección: ",
        "language_selected": "Idioma seleccionado: {}",
        "theme_selected": "Tema seleccionado: {}",
        "unknown_operator": "Operador desconocido",
        "unknown_area": "Área desconocida",
        "file_not_found": "Archivo no encontrado!",
        "whatsapp_high": "Alta probabilidad de WhatsApp! 📱",
        "whatsapp_likely": "Probablemente usa WhatsApp! 🌍",
        "whatsapp_unlikely": "Número VoIP, improbable WhatsApp. 🤔",
        "whatsapp_uncertain": "Puede usar WhatsApp pero no seguro.",
        "social_media_likely": "Probablemente usa Telegram, Signal o WhatsApp!",
        "social_media_voip": "Número VoIP, puede ser Skype o Discord.",
        "social_media_uncertain": "Uso de redes sociales incierto.",
    }
}

THEMES = {
    "dark": {"primary": Fore.BLUE, "highlight": Fore.CYAN, "error": Fore.RED, "success": Fore.GREEN},
    "neon": {"primary": Fore.MAGENTA, "highlight": Fore.YELLOW, "error": Fore.RED, "success": Fore.GREEN},
    "pastel": {"primary": Fore.LIGHTBLUE_EX, "highlight": Fore.LIGHTYELLOW_EX, "error": Fore.LIGHTRED_EX, "success": Fore.LIGHTGREEN_EX}
}

settings = {"language": "tr", "theme": "dark"}

OPERATORS = {
    "9053": "Turkcell",
    "9054": "Vodafone",
    "9055": "Türk Telekom",
    "9050": "Vodafone",
    "9059": "Türk Telekom",
    "9056": "Turkcell",
    "9057": "Vodafone",
}

AREA_CODES_TR = {
    "212": "İstanbul (Avrupa Yakası)",
    "216": "İstanbul (Anadolu Yakası)",
    "232": "İzmir",
    "312": "Ankara",
    "352": "Konya",
    "242": "Antalya",
    "262": "Kocaeli",
    "332": "Konya",
}

NUM_TYPE_MAP = {
    0: {"tr": "Bilinmeyen numara, tam bir muamma!", "en": "Unknown number, a total mystery!", "es": "¡Número desconocido, un misterio total!"},
    1: {"tr": "Mobil numara, cebinde!", "en": "Mobile number, always in your pocket!", "es": "¡Número móvil, siempre en tu bolsillo!"},
    2: {"tr": "Sabit hat, nostalji sevenler için!", "en": "Landline, for nostalgia lovers!", "es": "¡Línea fija, para amantes de la nostalgia!"},
    7: {"tr": "VoIP numarası, teknoloji meraklısı!", "en": "VoIP number, tech enthusiast!", "es": "¡Número VoIP, entusiasta de la tecnología!"},
}

SPAM_PREFIXES = ["+4470", "+1202", "+1900"] 

def clear_screen():
    os.system('cls' if os.name == 'nt' else 'clear')

def slow_print(text, delay=0.02, color=Fore.WHITE):
    for c in text:
        print(f"{color}{c}{Style.RESET_ALL}", end='', flush=True)
        time.sleep(delay)
    print()

def show_welcome():
    clear_screen()
    ascii_art = """
    ╔════════════════════════════════════════════╗
    ║                                            ║
    ║   SoytariNumber - Numara Dedektifi 🕵️‍♂️   ║
    ║   Telefon Numaralarının Sırlarını Çöz!     ║
    ║                                            ║
    ╚════════════════════════════════════════════╝
    """
    theme = THEMES[settings["theme"]]
    for line in ascii_art.splitlines():
        print(f"{theme['primary']}{line}{Style.RESET_ALL}")
        time.sleep(0.15)
    slow_print(LANGUAGES[settings["language"]]["welcome"], 0.03, theme["highlight"])
    time.sleep(1)

def get_flag(country_code):
    OFFSET = 127397
    try:
        return ''.join(chr(ord(c) + OFFSET) for c in country_code.upper())
    except:
        return ""

def guess_operator(number):
    for prefix, op in OPERATORS.items():
        if number.startswith(prefix):
            return op
    return LANGUAGES[settings["language"]]["unknown_operator"]

def guess_area(code):
    return AREA_CODES_TR.get(code, LANGUAGES[settings["language"]]["unknown_area"])

def format_number(number):
    number = re.sub(r'[\s\-\(\)]', '', number)
    if not number.startswith('+'):
        number = '+' + number
    return number if validate_number(number) else None

def validate_number(num):
    pattern = re.compile(r'^\+\d{7,15}$')
    return bool(pattern.match(num))

def guess_whatsapp(number, country_code, num_type):
    lang = settings["language"]
    lang_dict = LANGUAGES[lang]
    if num_type == 1:
        if country_code == "TR":
            return lang_dict["whatsapp_high"]
        return lang_dict["whatsapp_likely"]
    elif num_type == 7:
        return lang_dict["whatsapp_unlikely"]
    return lang_dict["whatsapp_uncertain"]

def guess_social_media(num_type):
    lang = settings["language"]
    lang_dict = LANGUAGES[lang]
    if num_type == 1:
        return lang_dict["social_media_likely"]
    elif num_type == 7:
        return lang_dict["social_media_voip"]
    return lang_dict["social_media_uncertain"]

def calculate_spam_score(number, online_results):
    score = 100
    if any(number.startswith(prefix) for prefix in SPAM_PREFIXES):
        score -= 50
    if any(word in online_results.lower() for word in ["şikayet", "spam", "dolandırıcılık"]):
        score -= 30
    return max(0, score)

def search_number_online(number):
    try:
        headers = {"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) Chrome/91.0.4472.124"}
        search_query = quote(number)
        url = f"https://www.google.com/search?q={search_query}"
        response = requests.get(url, headers=headers, timeout=5)
        soup = BeautifulSoup(response.text, "html.parser")
        results = []
        for g in soup.find_all('div', class_='g'):
            title = g.find('h3')
            snippet = g.find('div', class_='VwiC3b')
            if title and snippet:
                results.append(f"Başlık: {title.text}\nAçıklama: {snippet.text[:100]}...")
        return "\n".join(results[:3]) or "No results found."
    except Exception as e:
        return f"Search error: {str(e)}"

def get_number_type_desc(num_type):
    return NUM_TYPE_MAP.get(num_type, {"tr": "Bilinmeyen numara!", "en": "Unknown number!", "es": "¡Número desconocido!"})[settings["language"]]

def save_to_db(number, details):
    db_file = "number_db.json"
    data = {}
    if os.path.exists(db_file):
        with open(db_file, "r", encoding="utf-8") as f:
            data = json.load(f)
    data[number] = details
    with open(db_file, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def get_from_db(number):
    db_file = "number_db.json"
    if os.path.exists(db_file):
        with open(db_file, "r", encoding="utf-8") as f:
            data = json.load(f)
        return data.get(number)
    return None

def save_report(number, details):
    timestamp = time.strftime("%Y%m%d_%H%M%S")
    filename = f"numara_raporu_{timestamp}.txt"
    with open(filename, "w", encoding="utf-8") as f:
        f.write("=== SoytariNumber Analiz Raporu ===\n")
        f.write(f"Tarih: {time.strftime('%Y-%m-%d %H:%M:%S')}\n\n")
        for key, value in details.items():
            f.write(f"{key}: {value}\n")
    return filename

def analyze_single_number(number):
    try:
        parsed = phonenumbers.parse(number)
    except phonenumbers.phonenumberutil.NumberParseException as e:
        return {"Hata": str(e)}

    country_code = phonenumbers.region_code_for_number(parsed)
    country_name = geocoder.description_for_number(parsed, settings["language"])
    operator = carrier.name_for_number(parsed, settings["language"])
    num_type_code = number_type(parsed)
    num_type_desc = get_number_type_desc(num_type_code)
    flag = get_flag(country_code) if country_code else ""
    whatsapp_guess = guess_whatsapp(number, country_code, num_type_code)
    social_media_guess = guess_social_media(num_type_code)
    online_results = search_number_online(number)
    spam_score = calculate_spam_score(number, online_results)
    area = guess_area(number[3:6]) if country_code == "TR" else "N/A"

    details = {
        "Numara": number,
        "Ülke": f"{country_name} {flag}",
        "Operatör (Kütüphane)": operator or LANGUAGES[settings["language"]]["unknown_operator"],
        "Operatör (Tahmin)": guess_operator(number[1:5]),
        "Numara Tipi": num_type_desc,
        "Bölge": area,
        "WhatsApp Olasılığı": whatsapp_guess,
        "Sosyal Medya Tahmini": social_media_guess,
        "İnternet Araması": online_results,
        "Spam Skoru": f"{spam_score}/100"
    }
    save_to_db(number, details)
    return details

def show_menu():
    clear_screen()
    theme = THEMES[settings["theme"]]
    print(f"{theme['primary']}=== SoytariNumber Menü ==={Style.RESET_ALL}")
    print(LANGUAGES[settings["language"]]["menu"], end="")

def show_settings():
    lang = settings["language"]
    theme = THEMES[settings["theme"]]
    while True:
        clear_screen()
        print(f"{theme['primary']}{LANGUAGES[lang]['settings']}{Style.RESET_ALL}")
        choice = input().strip()
        if choice == "1":
            new_lang = input("Dil seç (TR/EN/ES): ").strip().lower()
            if new_lang in LANGUAGES:
                settings["language"] = new_lang
                print(f"{theme['success']}{LANGUAGES[new_lang]['language_selected'].format(new_lang.upper())}{Style.RESET_ALL}")
            else:
                print(f"{theme['error']}Geçersiz dil!{Style.RESET_ALL}")
        elif choice == "2":
            new_theme = input("Tema seç (Dark/Neon/Pastel): ").strip().lower()
            if new_theme in THEMES:
                settings["theme"] = new_theme
                print(f"{theme['success']}{LANGUAGES[lang]['theme_selected'].format(new_theme.capitalize())}{Style.RESET_ALL}")
            else:
                print(f"{theme['error']}Geçersiz tema!{Style.RESET_ALL}")
        elif choice == "3":
            break
        input("Devam etmek için Enter'a bas...")

def analyze_bulk_numbers(filename):
    lang = settings["language"]
    theme = THEMES[settings["theme"]]
    if not os.path.exists(filename):
        return LANGUAGES[lang]["file_not_found"]
    numbers = []
    with open(filename, "r", encoding="utf-8") as f:
        numbers = [line.strip() for line in f if line.strip()]
    results = []
    for number in numbers:
        formatted_number = format_number(number)
        if not formatted_number:
            results.append(f"{number}: {LANGUAGES[lang]['invalid_number']}")
            continue
        details = analyze_single_number(formatted_number)
        results.append(f"{number}:\n" + "\n".join(f"{key}: {value}" for key, value in details.items()))
    return "\n\n".join(results)

def main():
    show_welcome()
    while True:
        theme = THEMES[settings["theme"]]
        print(f"{theme['primary']}{LANGUAGES[settings['language']]['menu']}{Style.RESET_ALL}", end="")
        choice = input().strip()
        if choice == "1":
            number = input(LANGUAGES[settings["language"]]["enter_number"])
            formatted = format_number(number)
            if not formatted:
                print(f"{theme['error']}{LANGUAGES[settings['language']]['invalid_number']}{Style.RESET_ALL}")
                continue
            print(f"{theme['highlight']}{LANGUAGES[settings['language']]['analyzing']}{Style.RESET_ALL}")
            details = analyze_single_number(formatted)
            for k, v in details.items():
                print(f"{theme['primary']}{k}: {theme['highlight']}{v}{Style.RESET_ALL}")
            save_path = save_report(formatted, details)
            print(f"{theme['success']}{LANGUAGES[settings['language']]['report_saved'].format(save_path)}{Style.RESET_ALL}")
            input("Devam etmek için Enter'a bas...")
        elif choice == "2":
            fname = input("Toplu numara dosyasının adı (ör: numbers.txt): ")
            bulk_result = analyze_bulk_numbers(fname)
            print(bulk_result)
            input("Devam etmek için Enter'a bas...")
        elif choice == "3":
            db_file = "number_db.json"
            if not os.path.exists(db_file):
                print(f"{theme['error']}{LANGUAGES[settings['language']]['no_reports']}{Style.RESET_ALL}")
                input("Devam etmek için Enter'a bas...")
                continue
            with open(db_file, "r", encoding="utf-8") as f:
                data = json.load(f)
            for num, info in data.items():
                print(f"\n{theme['highlight']}Numara: {num}{Style.RESET_ALL}")
                for key, val in info.items():
                    print(f"{theme['primary']}{key}: {val}{Style.RESET_ALL}")
            input("Devam etmek için Enter'a bas...")
        elif choice == "4":
            show_settings()
        elif choice == "5":
            print(f"{theme['success']}{LANGUAGES[settings['language']]['goodbye']}{Style.RESET_ALL}")
            break
        else:
            print(f"{theme['error']}{LANGUAGES[settings['language']]['invalid_choice']}{Style.RESET_ALL}")

if __name__ == "__main__":
    main()
